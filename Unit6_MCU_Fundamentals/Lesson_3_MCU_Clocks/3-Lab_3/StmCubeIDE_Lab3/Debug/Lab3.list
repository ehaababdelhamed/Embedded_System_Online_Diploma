
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000280  08000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000280  08000280  00010288  2**0
                  CONTENTS
  4 .ARM          00000000  08000280  08000280  00010288  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000280  08000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000280  08000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000284  08000284  00010284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000288  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000288  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000ca  00000000  00000000  000102b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000007c  00000000  00000000  0001037b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  000103f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00010448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ade  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000102  00000000  00000000  00010f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002e99  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00013ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00013f74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000268 	.word	0x08000268

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000268 	.word	0x08000268

08000170 <RCC_init>:
#define RCC_CR	(*(volatile uint32*)(RCC_BASE + 0x00)) //RCC Control Register

#define RCC_CFGR 	(*(volatile uint32*)(RCC_BASE + 4))


void RCC_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*
	 * Set Value 0000 in bit 4:7 for AHB no prescaler
	 * Set Value 100 in bit  8:10 for APB1 prescaler 2
	 * Set Value 101 in bit  11:13 for APB1 prescaler 2 */

	RCC_CFGR = (0b0110<<18)|(0b100<<8)|(0b101<<11);
 8000174:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <RCC_init+0x44>)
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <RCC_init+0x48>)
 8000178:	601a      	str	r2, [r3, #0]
	/* bit 0 : HSI Enable  	bit 1 : HSI Ready
	 * bit 16: HSE Enable 	bit 17: HSE Ready
	 * bit 24: PLL Enable	bit 25: PLL Ready
	 * */
	//Turn ON PLL
	RCC_CR|=(1<<24);
 800017a:	4b10      	ldr	r3, [pc, #64]	; (80001bc <RCC_init+0x4c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a0f      	ldr	r2, [pc, #60]	; (80001bc <RCC_init+0x4c>)
 8000180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000184:	6013      	str	r3, [r2, #0]
	//Wait To PLL Ready
	while(!(RCC_CR&(1<<25))){}
 8000186:	bf00      	nop
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <RCC_init+0x4c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000190:	2b00      	cmp	r3, #0
 8000192:	d0f9      	beq.n	8000188 <RCC_init+0x18>
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/
	//Select PLL as Clock Source
	RCC_CFGR|=(0b10<<0);
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <RCC_init+0x44>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <RCC_init+0x44>)
 800019a:	f043 0302 	orr.w	r3, r3, #2
 800019e:	6013      	str	r3, [r2, #0]
	//Turn OFF HSI
	RCC_CR &= ~(1<<0);
 80001a0:	4b06      	ldr	r3, [pc, #24]	; (80001bc <RCC_init+0x4c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a05      	ldr	r2, [pc, #20]	; (80001bc <RCC_init+0x4c>)
 80001a6:	f023 0301 	bic.w	r3, r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021004 	.word	0x40021004
 80001b8:	00182c00 	.word	0x00182c00
 80001bc:	40021000 	.word	0x40021000

080001c0 <main>:
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	RCC_init();
 80001c4:	f7ff ffd4 	bl	8000170 <RCC_init>
    /* Loop forever */
	for(;;);
 80001c8:	e7fe      	b.n	80001c8 <main+0x8>
	...

080001cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001cc:	480d      	ldr	r0, [pc, #52]	; (8000204 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d4:	480c      	ldr	r0, [pc, #48]	; (8000208 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d6:	490d      	ldr	r1, [pc, #52]	; (800020c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d8:	4a0d      	ldr	r2, [pc, #52]	; (8000210 <LoopForever+0xe>)
  movs r3, #0
 80001da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001dc:	e002      	b.n	80001e4 <LoopCopyDataInit>

080001de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e2:	3304      	adds	r3, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e8:	d3f9      	bcc.n	80001de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ea:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001ec:	4c0a      	ldr	r4, [pc, #40]	; (8000218 <LoopForever+0x16>)
  movs r3, #0
 80001ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f0:	e001      	b.n	80001f6 <LoopFillZerobss>

080001f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f4:	3204      	adds	r2, #4

080001f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f8:	d3fb      	bcc.n	80001f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001fa:	f000 f811 	bl	8000220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fe:	f7ff ffdf 	bl	80001c0 <main>

08000202 <LoopForever>:

LoopForever:
    b LoopForever
 8000202:	e7fe      	b.n	8000202 <LoopForever>
  ldr   r0, =_estack
 8000204:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800020c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000210:	08000288 	.word	0x08000288
  ldr r2, =_sbss
 8000214:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000218:	2000001c 	.word	0x2000001c

0800021c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800021c:	e7fe      	b.n	800021c <ADC1_2_IRQHandler>
	...

08000220 <__libc_init_array>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2500      	movs	r5, #0
 8000224:	4e0c      	ldr	r6, [pc, #48]	; (8000258 <__libc_init_array+0x38>)
 8000226:	4c0d      	ldr	r4, [pc, #52]	; (800025c <__libc_init_array+0x3c>)
 8000228:	1ba4      	subs	r4, r4, r6
 800022a:	10a4      	asrs	r4, r4, #2
 800022c:	42a5      	cmp	r5, r4
 800022e:	d109      	bne.n	8000244 <__libc_init_array+0x24>
 8000230:	f000 f81a 	bl	8000268 <_init>
 8000234:	2500      	movs	r5, #0
 8000236:	4e0a      	ldr	r6, [pc, #40]	; (8000260 <__libc_init_array+0x40>)
 8000238:	4c0a      	ldr	r4, [pc, #40]	; (8000264 <__libc_init_array+0x44>)
 800023a:	1ba4      	subs	r4, r4, r6
 800023c:	10a4      	asrs	r4, r4, #2
 800023e:	42a5      	cmp	r5, r4
 8000240:	d105      	bne.n	800024e <__libc_init_array+0x2e>
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000248:	4798      	blx	r3
 800024a:	3501      	adds	r5, #1
 800024c:	e7ee      	b.n	800022c <__libc_init_array+0xc>
 800024e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000252:	4798      	blx	r3
 8000254:	3501      	adds	r5, #1
 8000256:	e7f2      	b.n	800023e <__libc_init_array+0x1e>
 8000258:	08000280 	.word	0x08000280
 800025c:	08000280 	.word	0x08000280
 8000260:	08000280 	.word	0x08000280
 8000264:	08000284 	.word	0x08000284

08000268 <_init>:
 8000268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026a:	bf00      	nop
 800026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026e:	bc08      	pop	{r3}
 8000270:	469e      	mov	lr, r3
 8000272:	4770      	bx	lr

08000274 <_fini>:
 8000274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000276:	bf00      	nop
 8000278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027a:	bc08      	pop	{r3}
 800027c:	469e      	mov	lr, r3
 800027e:	4770      	bx	lr
