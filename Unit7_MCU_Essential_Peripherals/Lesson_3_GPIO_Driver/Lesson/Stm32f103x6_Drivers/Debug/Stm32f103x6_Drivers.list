
Stm32f103x6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000498  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005e0  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008c8  00000000  00000000  00010609  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000271  00000000  00000000  00010ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003f8  00000000  00000000  00011142  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00011540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d7e  00000000  00000000  00011698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000041d  00000000  00000000  00012416  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003b67  00000000  00000000  00012833  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001639a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000220  00000000  00000000  00016418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005b0 	.word	0x080005b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005b0 	.word	0x080005b0

08000170 <delay>:
 ******************************************************************************/
#include "gpio.h"
#include "stm32f103x6.h"


void delay(uint32 count){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32 i,j;
	for(i=0;i<count;i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
		for(j=0;j<100;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2b63      	cmp	r3, #99	; 0x63
 800018e:	d9f9      	bls.n	8000184 <delay+0x14>
	for(i=0;i<count;i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <clock_init>:


void clock_init(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//Enable GPIOA Clock
	RCC_GPIOA_CLK_EN();
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <clock_init+0x28>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a07      	ldr	r2, [pc, #28]	; (80001d0 <clock_init+0x28>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6193      	str	r3, [r2, #24]
	//Enable GPIOB Clock
	RCC_GPIOB_CLK_EN();
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <clock_init+0x28>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <clock_init+0x28>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
	//wait to initialize clock
	delay(1);
 80001c4:	2001      	movs	r0, #1
 80001c6:	f7ff ffd3 	bl	8000170 <delay>
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_init>:

void GPIO_init(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
	//PA1 >> input floating
	//PA13 >> input floating
	//PB1 >> Output push pull
	//PB13 >> Output push pull
	GPIO_PinConfig_t pinConfig1 = {GPIO_PIN_1,GPIO_INUPUT_FLOATING,GPIO_SPEED_INPUT};
 80001da:	4a1e      	ldr	r2, [pc, #120]	; (8000254 <GPIO_init+0x80>)
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	6812      	ldr	r2, [r2, #0]
 80001e2:	4611      	mov	r1, r2
 80001e4:	8019      	strh	r1, [r3, #0]
 80001e6:	3302      	adds	r3, #2
 80001e8:	0c12      	lsrs	r2, r2, #16
 80001ea:	701a      	strb	r2, [r3, #0]
	GPIO_PinConfig_t pinConfig2 = {GPIO_PIN_13,GPIO_INUPUT_FLOATING,GPIO_SPEED_INPUT};
 80001ec:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <GPIO_init+0x84>)
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	6812      	ldr	r2, [r2, #0]
 80001f4:	4611      	mov	r1, r2
 80001f6:	8019      	strh	r1, [r3, #0]
 80001f8:	3302      	adds	r3, #2
 80001fa:	0c12      	lsrs	r2, r2, #16
 80001fc:	701a      	strb	r2, [r3, #0]
	GPIO_PinConfig_t pinConfig3 = {GPIO_PIN_1,GPIO_OUTPUT_PP,GPIO_SPEED_2_MHZ};
 80001fe:	4a17      	ldr	r2, [pc, #92]	; (800025c <GPIO_init+0x88>)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	6812      	ldr	r2, [r2, #0]
 8000204:	4611      	mov	r1, r2
 8000206:	8019      	strh	r1, [r3, #0]
 8000208:	3302      	adds	r3, #2
 800020a:	0c12      	lsrs	r2, r2, #16
 800020c:	701a      	strb	r2, [r3, #0]
	GPIO_PinConfig_t pinConfig4 = {GPIO_PIN_13,GPIO_OUTPUT_PP,GPIO_SPEED_2_MHZ};
 800020e:	4a14      	ldr	r2, [pc, #80]	; (8000260 <GPIO_init+0x8c>)
 8000210:	463b      	mov	r3, r7
 8000212:	6812      	ldr	r2, [r2, #0]
 8000214:	4611      	mov	r1, r2
 8000216:	8019      	strh	r1, [r3, #0]
 8000218:	3302      	adds	r3, #2
 800021a:	0c12      	lsrs	r2, r2, #16
 800021c:	701a      	strb	r2, [r3, #0]

	MCAL_GPIO_init(GPIO_PORTA, &pinConfig1);
 800021e:	f107 030c 	add.w	r3, r7, #12
 8000222:	4619      	mov	r1, r3
 8000224:	2000      	movs	r0, #0
 8000226:	f000 f883 	bl	8000330 <MCAL_GPIO_init>
	MCAL_GPIO_init(GPIO_PORTA, &pinConfig2);
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	4619      	mov	r1, r3
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f87d 	bl	8000330 <MCAL_GPIO_init>
	MCAL_GPIO_init(GPIO_PORTB, &pinConfig3);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4619      	mov	r1, r3
 800023a:	2001      	movs	r0, #1
 800023c:	f000 f878 	bl	8000330 <MCAL_GPIO_init>
	MCAL_GPIO_init(GPIO_PORTB, &pinConfig4);
 8000240:	463b      	mov	r3, r7
 8000242:	4619      	mov	r1, r3
 8000244:	2001      	movs	r0, #1
 8000246:	f000 f873 	bl	8000330 <MCAL_GPIO_init>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	080005c8 	.word	0x080005c8
 8000258:	080005cc 	.word	0x080005cc
 800025c:	080005d0 	.word	0x080005d0
 8000260:	080005d4 	.word	0x080005d4

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	clock_init();
 800026a:	f7ff ff9d 	bl	80001a8 <clock_init>
	GPIO_init();
 800026e:	f7ff ffb1 	bl	80001d4 <GPIO_init>
	uint32 SinglePressflag=0;
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
	/* Loop forever */
	while(1){
		//Check single press switch
		if(MCAL_GPIO_readPin(GPIO_PORTA,GPIO_PIN_1) == PIN_LOW){ //Check if switch pressed >> 0
 8000276:	2101      	movs	r1, #1
 8000278:	2000      	movs	r0, #0
 800027a:	f000 f8e5 	bl	8000448 <MCAL_GPIO_readPin>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d113      	bne.n	80002ac <main+0x48>
			delay(1); //delay for switch denouncing
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ff73 	bl	8000170 <delay>
			if(MCAL_GPIO_readPin(GPIO_PORTA,GPIO_PIN_1) == PIN_LOW){
 800028a:	2101      	movs	r1, #1
 800028c:	2000      	movs	r0, #0
 800028e:	f000 f8db 	bl	8000448 <MCAL_GPIO_readPin>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10b      	bne.n	80002b0 <main+0x4c>
				if(SinglePressflag == 0){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d108      	bne.n	80002b0 <main+0x4c>
					MCAL_GPIO_togglePin(GPIO_PORTB, GPIO_PIN_1);
 800029e:	2101      	movs	r1, #1
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f901 	bl	80004a8 <MCAL_GPIO_togglePin>
					SinglePressflag=1; 	//For single press
 80002a6:	2301      	movs	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e001      	b.n	80002b0 <main+0x4c>
				}
			}
		}else{
			SinglePressflag=0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
		}
		//Check Multi press switch
		if(MCAL_GPIO_readPin(GPIO_PORTA,GPIO_PIN_13) == PIN_HIGH){ //Check if switch pressed >> 1
 80002b0:	210d      	movs	r1, #13
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 f8c8 	bl	8000448 <MCAL_GPIO_readPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d1db      	bne.n	8000276 <main+0x12>
			delay(1); //delay for switch denouncing
 80002be:	2001      	movs	r0, #1
 80002c0:	f7ff ff56 	bl	8000170 <delay>
			if(MCAL_GPIO_readPin(GPIO_PORTA,GPIO_PIN_13) == PIN_HIGH){
 80002c4:	210d      	movs	r1, #13
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 f8be 	bl	8000448 <MCAL_GPIO_readPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d1d1      	bne.n	8000276 <main+0x12>
				MCAL_GPIO_togglePin(GPIO_PORTB, GPIO_PIN_13);
 80002d2:	210d      	movs	r1, #13
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f8e7 	bl	80004a8 <MCAL_GPIO_togglePin>
		if(MCAL_GPIO_readPin(GPIO_PORTA,GPIO_PIN_1) == PIN_LOW){ //Check if switch pressed >> 0
 80002da:	e7cc      	b.n	8000276 <main+0x12>

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f92d 	bl	8000568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffa9 	bl	8000264 <main>

08000312 <LoopForever>:

LoopForever:
    b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <MCAL_GPIO_init>:
 * Note				: Stm32f103x6 supported GPIOA,GPIOB,GPIOC,GPIOD,GPIOE
 * 					  but LQF48 Package supported fully GPIOA,GPIOB
 * 					  and partially GPIOC[13-15], GPIOD[0-1]
 ************************************************************************************/

void MCAL_GPIO_init(uint8 GPIO_Portx,GPIO_PinConfig_t *pinConfig){
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
	volatile uint32 *ConfigReg = NULL;	//For select CRH or CHL
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
	uint8 PinModeConfig=0;				//to shift mode number for output modes
 8000340:	2300      	movs	r3, #0
 8000342:	74fb      	strb	r3, [r7, #19]
	uint8 CRHL_Shift=0;					//to Calculate the shift corresponding to the pin
 8000344:	2300      	movs	r3, #0
 8000346:	747b      	strb	r3, [r7, #17]
	boolean error=FALSE;				//to check the if inputs is valid
 8000348:	2300      	movs	r3, #0
 800034a:	74bb      	strb	r3, [r7, #18]
	GPIO_TypeDef *GPIOx;				//Store Address of GPIOx
	GPIOx=GPIO_GetPortAdd(GPIO_Portx);
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4618      	mov	r0, r3
 8000350:	f000 f8d2 	bl	80004f8 <GPIO_GetPortAdd>
 8000354:	60f8      	str	r0, [r7, #12]
	if(GPIOx == NULL || pinConfig->Pin_Num < GPIO_PIN_0 || pinConfig->Pin_Num > GPIO_PIN_15){
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d003      	beq.n	8000364 <MCAL_GPIO_init+0x34>
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b0f      	cmp	r3, #15
 8000362:	d901      	bls.n	8000368 <MCAL_GPIO_init+0x38>
		error=TRUE;
 8000364:	2301      	movs	r3, #1
 8000366:	74bb      	strb	r3, [r7, #18]
	}
	if(error == FALSE){
 8000368:	7cbb      	ldrb	r3, [r7, #18]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d167      	bne.n	800043e <MCAL_GPIO_init+0x10e>
		//Port configuration register low (GPIOx_CRL) configure pins [0-7]
		//Port configuration register high (GPIOx_CRH) configure pins [8-15]
		(pinConfig->Pin_Num <= GPIO_PIN_7)? (ConfigReg = &(GPIOx->CRL)): (ConfigReg = &(GPIOx->CRH));
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b07      	cmp	r3, #7
 8000374:	d802      	bhi.n	800037c <MCAL_GPIO_init+0x4c>
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	617b      	str	r3, [r7, #20]
 800037a:	e002      	b.n	8000382 <MCAL_GPIO_init+0x52>
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3304      	adds	r3, #4
 8000380:	617b      	str	r3, [r7, #20]

		//Calculate the shift corresponding to the pin
		//Shifted pin : EX: pin8 >> pin0 in CRH
		CRHL_Shift=(pinConfig->Pin_Num%GPIO_PIN_8)*MODE_SHIFT;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	f003 0307 	and.w	r3, r3, #7
 800038a:	b2db      	uxtb	r3, r3
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	747b      	strb	r3, [r7, #17]

		//CLEAR MODEx:2 CNFx:2 corresponding to the pin
		*ConfigReg &= ~(0xf<< CRHL_Shift) ;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	7c7a      	ldrb	r2, [r7, #17]
 8000396:	210f      	movs	r1, #15
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	43d2      	mvns	r2, r2
 800039e:	401a      	ands	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	601a      	str	r2, [r3, #0]
		//Check in pin is at any output mode
		if(pinConfig->Pin_Mode >= GPIO_OUTPUT_PP){
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d90d      	bls.n	80003c8 <MCAL_GPIO_init+0x98>
			//Shifted Mode : EX: GPIO_OUTPUT_OD= 0b100 >> = 0b10
			PinModeConfig = ((pinConfig->Pin_Mode-OUTPUT_MODES_SHIFT) << CNF_SHIFT) | (pinConfig->Pin_Speed & 0x03);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	3b04      	subs	r3, #4
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	789b      	ldrb	r3, [r3, #2]
 80003bc:	f003 0303 	and.w	r3, r3, #3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	4313      	orrs	r3, r2
 80003c4:	74fb      	strb	r3, [r7, #19]
 80003c6:	e031      	b.n	800042c <MCAL_GPIO_init+0xfc>
		}else{	//if Pin is input
			switch(PinModeConfig){
 80003c8:	7cfb      	ldrb	r3, [r7, #19]
 80003ca:	2b03      	cmp	r3, #3
 80003cc:	d82d      	bhi.n	800042a <MCAL_GPIO_init+0xfa>
 80003ce:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <MCAL_GPIO_init+0xa4>)
 80003d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d4:	080003e5 	.word	0x080003e5
 80003d8:	080003e5 	.word	0x080003e5
 80003dc:	080003f5 	.word	0x080003f5
 80003e0:	0800040f 	.word	0x0800040f
			case GPIO_INPUT_ANALOG:
			case GPIO_INUPUT_FLOATING:
				PinModeConfig = ((pinConfig->Pin_Mode << CNF_SHIFT) & 0x0f);
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	785b      	ldrb	r3, [r3, #1]
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 030f 	and.w	r3, r3, #15
 80003f0:	74fb      	strb	r3, [r7, #19]
				break;
 80003f2:	e01b      	b.n	800042c <MCAL_GPIO_init+0xfc>
			case GPIO_INPUT_PU:
				PinModeConfig = ((GPIO_INPUT_PU << CNF_SHIFT) & 0x0f);
 80003f4:	2308      	movs	r3, #8
 80003f6:	74fb      	strb	r3, [r7, #19]
				//For Enable Pull Up >> ODRx =1
				SET_BIT(GPIOx->ODR,pinConfig->Pin_Num);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	683a      	ldr	r2, [r7, #0]
 80003fe:	7812      	ldrb	r2, [r2, #0]
 8000400:	4611      	mov	r1, r2
 8000402:	2201      	movs	r2, #1
 8000404:	408a      	lsls	r2, r1
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	60da      	str	r2, [r3, #12]
				break;
 800040c:	e00e      	b.n	800042c <MCAL_GPIO_init+0xfc>
			case GPIO_INPUT_PD:
				//For Enable Pull Down >> ODRx =0
				PinModeConfig = (((GPIO_INPUT_PD-1) << CNF_SHIFT) & 0x0f);
 800040e:	2308      	movs	r3, #8
 8000410:	74fb      	strb	r3, [r7, #19]
				CLEAR_BIT(GPIOx->ODR,pinConfig->Pin_Num);
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	43d2      	mvns	r2, r2
 8000422:	401a      	ands	r2, r3
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	60da      	str	r2, [r3, #12]
				break;
 8000428:	e000      	b.n	800042c <MCAL_GPIO_init+0xfc>
			default:
				break;
 800042a:	bf00      	nop
			}
		}
		//Set The required speed in MODE [2 bits] and the required pin mode in CNF [2 bits]
		*ConfigReg|=( PinModeConfig << (CRHL_Shift));
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	7cf9      	ldrb	r1, [r7, #19]
 8000432:	7c7a      	ldrb	r2, [r7, #17]
 8000434:	fa01 f202 	lsl.w	r2, r1, r2
 8000438:	431a      	orrs	r2, r3
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	601a      	str	r2, [r3, #0]
	}
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop

08000448 <MCAL_GPIO_readPin>:
 * Parameters (in)	: GPIO_Portx- Number of Specific instance of GPIO @REF: GPIO_NUMBER
 * 					  Pin_Num	- Pin number according @REF:GPIO_PINS_NUMBER
 * Return value		: PinLevelType according  @REF:GPIO_PIN_LEVEL
 * Note				: None
 ************************************************************************************/
uint8 MCAL_GPIO_readPin(uint8 GPIO_Portx,uint8 Pin_Num){
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	460a      	mov	r2, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
	uint8 PinLevelType=PIN_LOW;			//To store the pin value
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]
	boolean error=FALSE;				//To check the if inputs is valid
 800045c:	2300      	movs	r3, #0
 800045e:	73bb      	strb	r3, [r7, #14]
	GPIO_TypeDef *GPIOx;				//Store Address of GPIOx
	GPIOx=GPIO_GetPortAdd(GPIO_Portx);
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f848 	bl	80004f8 <GPIO_GetPortAdd>
 8000468:	60b8      	str	r0, [r7, #8]
	if(GPIOx == NULL || Pin_Num< GPIO_PIN_0 || Pin_Num > GPIO_PIN_15){
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d002      	beq.n	8000476 <MCAL_GPIO_readPin+0x2e>
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b0f      	cmp	r3, #15
 8000474:	d901      	bls.n	800047a <MCAL_GPIO_readPin+0x32>
		error=TRUE;
 8000476:	2301      	movs	r3, #1
 8000478:	73bb      	strb	r3, [r7, #14]
	}
	//if input valid >> Read the pin value from GPIO_IDR Register
	if(error == FALSE){
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10f      	bne.n	80004a0 <MCAL_GPIO_readPin+0x58>
		if(BIT_IS_SET(GPIOx->IDR,Pin_Num) == PIN_LOW ){
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	79ba      	ldrb	r2, [r7, #6]
 8000486:	2101      	movs	r1, #1
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4013      	ands	r3, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	d102      	bne.n	8000498 <MCAL_GPIO_readPin+0x50>
			PinLevelType = PIN_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e001      	b.n	800049c <MCAL_GPIO_readPin+0x54>
		}else{
			PinLevelType = PIN_HIGH;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
		}
		return PinLevelType;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	e7ff      	b.n	80004a0 <MCAL_GPIO_readPin+0x58>
	}
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <MCAL_GPIO_togglePin>:
 * Parameters (in)	: GPIO_Portx- Number of Specific instance of GPIO @REF: GPIO_NUMBER
 * 					  Pin_Num	- Pin number according @REF:GPIO_PINS_NUMBER
 * Return value		: None
 * Note				: None
 ************************************************************************************/
void MCAL_GPIO_togglePin(uint8 GPIO_Portx,uint8 Pin_Num){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	boolean error=FALSE;				//to check the if inputs is valid
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]
	GPIO_TypeDef *GPIOx;				//Store Address of GPIOx
	GPIOx=GPIO_GetPortAdd(GPIO_Portx);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f81a 	bl	80004f8 <GPIO_GetPortAdd>
 80004c4:	60b8      	str	r0, [r7, #8]
	//if input valid >> toggle the required pin
	if(GPIOx == NULL || Pin_Num< GPIO_PIN_0 || Pin_Num > GPIO_PIN_15){
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <MCAL_GPIO_togglePin+0x2a>
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	2b0f      	cmp	r3, #15
 80004d0:	d901      	bls.n	80004d6 <MCAL_GPIO_togglePin+0x2e>
		error=TRUE;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
	}
	if(error == FALSE){
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d108      	bne.n	80004ee <MCAL_GPIO_togglePin+0x46>
			TOGGLE_BIT(GPIOx->ODR,Pin_Num);
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	79ba      	ldrb	r2, [r7, #6]
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	405a      	eors	r2, r3
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	60da      	str	r2, [r3, #12]
	}
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <GPIO_GetPortAdd>:
	}
	return lockStatus;
}

/*Private Function to Get the Address of GPIOx According to input port number*/
static GPIO_TypeDef* GPIO_GetPortAdd(uint8 PortNum){
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* PortAdd = NULL;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	switch(PortNum){
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b04      	cmp	r3, #4
 800050a:	d81c      	bhi.n	8000546 <GPIO_GetPortAdd+0x4e>
 800050c:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <GPIO_GetPortAdd+0x1c>)
 800050e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000512:	bf00      	nop
 8000514:	08000529 	.word	0x08000529
 8000518:	0800052f 	.word	0x0800052f
 800051c:	08000535 	.word	0x08000535
 8000520:	0800053b 	.word	0x0800053b
 8000524:	08000541 	.word	0x08000541
	case GPIO_PORTA:
		PortAdd=GPIOA;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <GPIO_GetPortAdd+0x5c>)
 800052a:	60fb      	str	r3, [r7, #12]
		break;
 800052c:	e00c      	b.n	8000548 <GPIO_GetPortAdd+0x50>
	case GPIO_PORTB:
		PortAdd=GPIOB;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <GPIO_GetPortAdd+0x60>)
 8000530:	60fb      	str	r3, [r7, #12]
		break;
 8000532:	e009      	b.n	8000548 <GPIO_GetPortAdd+0x50>
	case GPIO_PORTC:
		PortAdd=GPIOC;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <GPIO_GetPortAdd+0x64>)
 8000536:	60fb      	str	r3, [r7, #12]
		break;
 8000538:	e006      	b.n	8000548 <GPIO_GetPortAdd+0x50>
	case GPIO_PORTD:
		PortAdd=GPIOD;
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <GPIO_GetPortAdd+0x68>)
 800053c:	60fb      	str	r3, [r7, #12]
		break;
 800053e:	e003      	b.n	8000548 <GPIO_GetPortAdd+0x50>
	case GPIO_PORTE:
		PortAdd=GPIOE;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <GPIO_GetPortAdd+0x6c>)
 8000542:	60fb      	str	r3, [r7, #12]
		break;
 8000544:	e000      	b.n	8000548 <GPIO_GetPortAdd+0x50>
	default:
		break;
 8000546:	bf00      	nop
	}
	return PortAdd;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40010800 	.word	0x40010800
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40011000 	.word	0x40011000
 8000560:	40011400 	.word	0x40011400
 8000564:	40011800 	.word	0x40011800

08000568 <__libc_init_array>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	2500      	movs	r5, #0
 800056c:	4e0c      	ldr	r6, [pc, #48]	; (80005a0 <__libc_init_array+0x38>)
 800056e:	4c0d      	ldr	r4, [pc, #52]	; (80005a4 <__libc_init_array+0x3c>)
 8000570:	1ba4      	subs	r4, r4, r6
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	42a5      	cmp	r5, r4
 8000576:	d109      	bne.n	800058c <__libc_init_array+0x24>
 8000578:	f000 f81a 	bl	80005b0 <_init>
 800057c:	2500      	movs	r5, #0
 800057e:	4e0a      	ldr	r6, [pc, #40]	; (80005a8 <__libc_init_array+0x40>)
 8000580:	4c0a      	ldr	r4, [pc, #40]	; (80005ac <__libc_init_array+0x44>)
 8000582:	1ba4      	subs	r4, r4, r6
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	42a5      	cmp	r5, r4
 8000588:	d105      	bne.n	8000596 <__libc_init_array+0x2e>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000590:	4798      	blx	r3
 8000592:	3501      	adds	r5, #1
 8000594:	e7ee      	b.n	8000574 <__libc_init_array+0xc>
 8000596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059a:	4798      	blx	r3
 800059c:	3501      	adds	r5, #1
 800059e:	e7f2      	b.n	8000586 <__libc_init_array+0x1e>
 80005a0:	080005d8 	.word	0x080005d8
 80005a4:	080005d8 	.word	0x080005d8
 80005a8:	080005d8 	.word	0x080005d8
 80005ac:	080005dc 	.word	0x080005dc

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr
