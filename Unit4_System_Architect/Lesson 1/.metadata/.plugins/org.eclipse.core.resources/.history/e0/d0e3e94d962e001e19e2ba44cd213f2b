/******************************************************************************
 * Module: FIFO
 * File Name: fifo.c
 * Description: Source file for FIFO Data structure
 * Author: Ehab Mohamed Abdelhamed
 ******************************************************************************/
#include "fifo.h"

/*******************************************************************************
 *                      Function Definition                                    *
 *******************************************************************************/

/************************************************************************************
* Function Name: FIFO_pop
* Parameters (in):	FIFO_Buf_t - Pointer to FIFO buffer
* 					buffer - pointer to data buffer
* 					len - Length of data buffer
* Return value: status of FIFO buffer
* Description: Function to initialize FIFO buffer
************************************************************************************/
FIFO_Status FIFO_init(FIFO_Buf_t* fifo_buf,ELEMENT_TYPE *buffer,uint32 len){
	FIFO_Status status;
	if(buffer==NULL){
		status=FIFO_NULL;
	}else{
		fifo_buf->base=buffer;
		fifo_buf->head=buffer;
		fifo_buf->tail=buffer;
		fifo_buf->length=len;
		fifo_buf->count=0;
		status=FIFO_NO_ERROR;
	}
	return status;
}

/************************************************************************************
* Function Name: LIFO_push
* Parameters (in):	LIFO_Buf_t - Pointer to LIFO buffer
* 					data - data that will added to buffer
* Return value: status of LIFO buffer
* Description: Function to add item in LIFO buffer.
************************************************************************************/
FIFO_Status FIFO_add_item(FIFO_Buf_t* fifo_buf,ELEMENT_TYPE data){
	FIFO_Status status;
	//check if FIFO valid
	if(fifo_buf->base == NULL ||fifo_buf->head == NULL||fifo_buf->tail == NULL){
		status=FIFO_NULL;
		//Check if FIFO is full
	}else if(fifo_buf->count >= fifo_buf->length){
		status=FIFO_FULL;
	}else{
		*(fifo_buf->head) = data;
		fifo_buf->head++;
		fifo_buf->count++;
		if((fifo_buf->head)>(fifo_buf->base+fifo_buf->length)){
			fifo_buf->head=fifo_buf->base;
		}
	}
	return status;
}

/************************************************************************************
* Function Name: LIFO_pop
* Parameters (in):	LIFO_Buf_t - Pointer to LIFO buffer
* 					data - pointer to variable that will save the data
* Return value: status of LIFO buffer
* Description: Function to get item form LIFO buffer.
************************************************************************************/
FIFO_Status FIFO_get_item(FIFO_Buf_t* fifo_buf,ELEMENT_TYPE *data){
	FIFO_Status status;
	//Check LIFO is valid
	if(fifo_buf->base == NULL ||fifo_buf->head == NULL||fifo_buf->tail == NULL){
		status=FIFO_NULL;
		//Check if FIFO is full
	}else if(fifo_buf->count >= fifo_buf->length){
		status=FIFO_FULL;
	}else{

	}

}
